from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("MNIST_data/",one_hot = True)

batch_xs, batch_ys = mnist.train.next_batch(100)
nb_classes = 10

#Mnist data image of shape 28*2* = 784
X = tf.placeholder(tf.float32,[None,784])

# 0 - 9 digits recognition = 10 classes
Y = tf.placeholder(tf.float32)

W= tf.Variable(tf.random_normal([784, nb_classes]))
b= tf.Variable(tf.random_normal([nb_classes]))

hypothesis = tf.nn.softmax(tf.matmul(X,W)+b)
cost = tf.reduce_mean(-tf.reduce_sum(Y*tf.log(hypothesis),axis=1))
optimizer = tf.train.GradientDescentOptimizer(learning_rate =0.1).minimize(cost)

#Test model
is_correct = tf.equal(tf.arg_max(hypothesis,1), tf.arg_max(Y,1))
#Calculate accuracy
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

# parameters
training_epochs = 15 
batch_size = 100

#epoch : 전체 datasets 한번 돌리면 1 epoch 
#batch_size : 전체를 한꺼번에 돌리지 않고 얼마나 짤라서 돌릴지 정하는 사이즈
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    #Training cycle
    for epoch in range(training_epochs):
        avg_cost = 0
        total_batch =int(mnist.train.num_examples / batch_size)
        
        for i in range(total_batch):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            c, _ = sess.run([cost,optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
            avg_cost += c/ total_batch
    
        print('Epoch:', '%04d' % (epoch +1), 'cost=', '{:.9f}'.format(avg_cost) )
    print("Accuracy: ", accuracy.eval(session=sess,feed_dict={X:mnist.test.images,Y:mnist.test.labels}))
